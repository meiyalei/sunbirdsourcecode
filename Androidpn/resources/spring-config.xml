<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd">


	<!-- =============================================================== -->
	<!-- Resources                                                       -->
	<!-- =============================================================== -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- =============================================================== -->
	<!-- Data Source                                                     -->
	<!-- =============================================================== -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbcDriverClassName}" />
		<property name="url" value="${jdbcUrl}" />
		<property name="username" value="${jdbcUsername}" />
		<property name="password" value="${jdbcPassword}" />
		<property name="maxActive" value="${jdbcMaxActive}" />
		<property name="maxIdle" value="${jdbcMaxIdle}" />
		<property name="maxWait" value="${jdbcMaxWait}" />
		<property name="defaultAutoCommit" value="true" />
	</bean>

	<!-- =============================================================== -->
	<!-- Hibernate                                                       -->
	<!-- =============================================================== -->

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- =============================================================== -->
	<!-- Data Access Objects                                             -->
	<!-- =============================================================== -->

	<bean id="userDao" class="org.androidpn.server.dao.hibernate.UserDaoHibernate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="messageDao" class="org.androidpn.server.dao.hibernate.MessageDaoHibernate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- =============================================================== -->
	<!-- Services                                                        -->
	<!-- =============================================================== -->

	<bean id="userService" class="org.androidpn.server.service.impl.UserServiceImpl">
		<property name="userDao" ref="userDao" />
	</bean>
	<bean id="notificationManager" class="org.androidpn.server.xmpp.push.NotificationManager">
		<property name="userDao" ref="userDao" />
		<property name="messageDao" ref="messageDao" />
	</bean>
	<bean id="messageServiceTarget" class="org.androidpn.server.service.impl.MessageServiceImpl">
		<property name="messageDao" ref="messageDao" />
	</bean>
	
	<bean id="messageService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="target" ref="messageServiceTarget" />
		<property name="transactionAttributes">
			<props>
				<prop key="saveMessage">PROPAGATION_REQUIRED</prop>
				<prop key="saveBatch">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<!-- =============================================================== -->
	<!-- SSL                                                             -->
	<!-- =============================================================== -->

	<!--
		<bean id="tlsContextFactory"
		class="org.androidpn.server.ssl2.ResourceBasedTLSContextFactory">
		<constructor-arg value="classpath:bogus_mina_tls.cert" /> <property
		name="password" value="boguspw" /> <property
		name="trustManagerFactory"> <bean
		class="org.androidpn.server.ssl2.BogusTrustManagerFactory" />
		</property> </bean>
	-->

	<!-- =============================================================== -->
	<!-- MINA                                                            -->
	<!-- =============================================================== -->

	<bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		<property name="customEditors">
			<map>
				<entry key="java.net.SocketAddress">
					<bean class="org.apache.mina.integration.beans.InetSocketAddressEditor" />
				</entry>
			</map>
		</property>
	</bean>

	<bean id="xmppHandler" class="org.androidpn.server.xmpp.net.XmppIoHandler">
		<property name="messageService" ref="messageService"/>
	</bean>

	<bean id="aPNKeepAliveRequestTimeoutHandler" class="org.androidpn.server.xmpp.message.handler.APNKeepAliveRequestTimeoutHandler"/>
	<bean id="keepAliveMessageImpl" class="org.androidpn.server.xmpp.message.handler.KeepAliveMessageImpl"/>
	
	<bean id="filterChainBuilder" class="org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder">
		<property name="filters">
			<map>
				<entry key="executor">
					<bean class="org.apache.mina.filter.executor.ExecutorFilter" />
				</entry>
				<entry key="codec">
					<bean class="org.apache.mina.filter.codec.ProtocolCodecFilter">
						<constructor-arg>
							<bean class="org.androidpn.server.xmpp.codec.XmppCodecFactory" />
						</constructor-arg>
					</bean>
				</entry>
				
				
				<!-- 
					<entry key="KeepAlive">
						<bean class="org.apache.mina.filter.keepalive.KeepAliveFilter">
							<constructor-arg ref="keepAliveMessageImpl"/>
							<property name="forwardEvent" value="false" />
							<property name="requestInterval" value="30" />
							<property name="requestTimeout" value="10" />
							<property name="requestTimeoutHandler" ref="aPNKeepAliveRequestTimeoutHandler" />
						</bean>
					</entry>
				 -->
				
				
				<!--
					<entry key="logging"> <bean class="org.apache.mina.filter.logging.LoggingFilter" /> </entry>
				-->
			</map>
		</property>
	</bean>
	<bean id="ioAcceptor" class="org.apache.mina.transport.socket.nio.NioSocketAcceptor"
		init-method="bind" destroy-method="unbind">
		<property name="defaultLocalAddress" value=":5222" />
		<property name="handler" ref="xmppHandler" />
		<property name="filterChainBuilder" ref="filterChainBuilder" />
		<property name="reuseAddress" value="true" />
	</bean>

	<!-- =============================================================== -->
	<!--
		ClearUser 定时任务。
	-->
	<!-- =============================================================== -->

	<!-- 要调度的对象   -->
	<bean id="userCleanerTarget" class="org.androidpn.server.service.impl.UserCleaner">
		<property name="userDao" ref="userDao" />
		<property name="notificationManager" ref="notificationManager" />
	</bean>
	<bean id="cleanerTask" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="target" ref="userCleanerTarget" />
		<property name="transactionAttributes">
			<props>
				<prop key="clean">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	<!--定义定时执行userCleaner 这个bean中的clean()方法-->
	<bean id="userCleanTask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="cleanerTask" />
		<property name="targetMethod" value="clean" />
	</bean>
	<bean id="sessionCleanTask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="cleanerTask" />
		<property name="targetMethod" value="checkDeadTcps" />
	</bean>
	<!--
		触发器的bean的设置，在这里我们设置了我们要触发的jobDetail是哪个。这里我们定义了要触发的jobDetail是helloworldTask，即触发器去触发哪个bean..并且我们还定义了触发的时间:每天5:17pm
	-->
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="userCleanTask" />
		</property>
		<property name="cronExpression">
			<!-- 关键在配置此表达式 -->
			<value>30 * * * * ?</value>
		</property>
	</bean>
	<bean id="cronTrigger2" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="sessionCleanTask" />
		</property>
		<property name="cronExpression">
			<!-- 关键在配置此表达式 -->
			<value>30 * * * * ?</value>
		</property>
	</bean>
	<!--管理触发器的总设置,管理我们的触发器列表,可以在bean的list中放置多个触发器. -->
	<bean autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
			    <!--
					<ref local="cronTrigger" />
				 -->
					<ref local="cronTrigger2" />
			</list>
		</property>
	</bean>
</beans>